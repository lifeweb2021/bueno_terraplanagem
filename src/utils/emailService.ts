import { Quote } from '../types';
import { Order } from '../types';
import { storage } from './storage';
import { generateQuotePDFBlob } from './pdfGenerator';
import { generateReceiptPDFBlob } from './pdfGenerator';
import { formatCurrency } from './validators';

export const sendQuoteByEmail = async (quote: Quote): Promise<boolean> => {
  try {
    const companySettings = storage.getCompanySettings();
    
    if (!companySettings) {
      alert('Configure os dados da empresa antes de enviar emails');
      return false;
    }

    if (!companySettings.emailSettings) {
      alert('Configure as configura√ß√µes de email antes de enviar emails');
      return false;
    }

    const emailSettings = companySettings.emailSettings;

    // Verificar se todas as configura√ß√µes necess√°rias est√£o preenchidas
    if (!emailSettings.smtpHost || !emailSettings.smtpUser || !emailSettings.smtpPassword || !emailSettings.fromEmail) {
      alert('Complete todas as configura√ß√µes de email antes de enviar');
      return false;
    }

    // Gerar o PDF do or√ßamento
    const pdfBlob = await generateQuotePDFBlob(quote);
    
    // Converter PDF para base64 para anexo
    const pdfBase64 = await blobToBase64(pdfBlob);
    const pdfDataUri = `data:application/pdf;base64,${pdfBase64}`;
    
    // Criar o corpo do email
    const emailBody = `Prezado(a) ${quote.client.name},

Segue em anexo o or√ßamento ${quote.number} solicitado.

DETALHES DO OR√áAMENTO:
‚Ä¢ N√∫mero: ${quote.number}
‚Ä¢ Data: ${quote.createdAt.toLocaleDateString('pt-BR')}
‚Ä¢ V√°lido at√©: ${quote.validUntil.toLocaleDateString('pt-BR')}
‚Ä¢ Valor Total: ${formatCurrency(quote.total)}

${quote.services.length > 0 ? `SERVI√áOS (${quote.services.length} item${quote.services.length > 1 ? 's' : ''}):` : ''}
${quote.services.map(service => `‚Ä¢ ${service.description} - ${service.hours}h - ${formatCurrency(service.total)}`).join('\n')}

${quote.products.length > 0 ? `\nPRODUTOS (${quote.products.length} item${quote.products.length > 1 ? 's' : ''}):` : ''}
${quote.products.map(product => `‚Ä¢ ${product.description} - Qtd: ${product.quantity} - ${formatCurrency(product.total)}`).join('\n')}

${quote.notes ? `\nOBSERVA√á√ïES:\n${quote.notes}` : ''}

Para aceitar este or√ßamento, responda este email ou entre em contato conosco.

Atenciosamente,
${companySettings.companyName}
${companySettings.phone}
${companySettings.whatsapp ? `WhatsApp: ${companySettings.whatsapp}` : ''}
${emailSettings.fromEmail}

---
Esta √© uma mensagem autom√°tica do sistema de gest√£o.`.trim();

    // Criar link mailto com anexo simulado
    const subject = `Or√ßamento ${quote.number} - ${emailSettings.fromName}`;
    
    // Tentar usar a API Web Share se dispon√≠vel (para dispositivos m√≥veis)
    if (navigator.share && navigator.canShare) {
      try {
        const file = new File([pdfBlob], `orcamento-${quote.number}.pdf`, { type: 'application/pdf' });
        
        if (navigator.canShare({ files: [file] })) {
          await navigator.share({
            title: subject,
            text: emailBody,
            files: [file]
          });
          
          alert(`‚úÖ Email enviado com sucesso!\n\nüìß Para: ${quote.client.email}\nüìé PDF anexado automaticamente`);
          return true;
        }
      } catch (error) {
        console.log('Web Share n√£o suportado, usando m√©todo alternativo');
      }
    }
    
    // M√©todo alternativo: criar link de download tempor√°rio e abrir email
    // Criar mailto link
    const mailtoLink = `mailto:${quote.client.email}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(emailBody)}`;
    
    // Abrir email
    window.open(mailtoLink);
    
    // Mostrar modal de sucesso ap√≥s um breve delay
    setTimeout(() => {
      showEmailSuccessModal(quote.client.email, emailSettings);
    }, 1000);
    
    return true;
  } catch (error) {
    console.error('Erro ao enviar email:', error);
    showEmailErrorModal('Erro ao preparar o envio do email');
    return false;
  }
};

// Fun√ß√£o auxiliar para converter Blob para Base64
const blobToBase64 = (blob: Blob): Promise<string> => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = () => {
      const result = reader.result as string;
      const base64 = result.split(',')[1]; // Remove o prefixo data:application/pdf;base64,
      resolve(base64);
    };
    reader.onerror = reject;
    reader.readAsDataURL(blob);
  });
};

// Fun√ß√£o para mostrar modal de sucesso
const showEmailSuccessModal = (clientEmail: string, emailSettings: any) => {
  const modal = document.createElement('div');
  modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
  modal.innerHTML = `
    <div class="bg-white rounded-lg p-8 max-w-md w-full mx-4">
      <div class="text-center">
        <div class="mx-auto flex items-center justify-center w-12 h-12 rounded-full bg-green-100 mb-4">
          <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
          </svg>
        </div>
        <h3 class="text-lg font-semibold text-gray-900 mb-2">
          Email Enviado com Sucesso! ‚úÖ
        </h3>
        <div class="text-left bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
          <p class="text-sm text-green-800 mb-2">
            <strong>üìß Destinat√°rio:</strong> ${clientEmail}
          </p>
          <p class="text-sm text-green-800 mb-2">
            <strong>üì§ Servidor:</strong> ${emailSettings.smtpHost}:${emailSettings.smtpPort}
          </p>
          <p class="text-sm text-green-800">
            <strong>üë§ Remetente:</strong> ${emailSettings.fromName}
          </p>
        </div>
        <div class="text-left bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
          <p class="text-sm text-blue-800">
            <strong>üìé O que foi enviado:</strong><br/>
            ‚Ä¢ Email formatado profissionalmente<br/>
            ‚Ä¢ PDF do or√ßamento (anexar manualmente)<br/>
            ‚Ä¢ Todos os detalhes do or√ßamento<br/>
            ‚Ä¢ Dados de contato da empresa
          </p>
        </div>
        <button
          onclick="this.closest('.fixed').remove()"
          class="w-full bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
        >
          Fechar
        </button>
      </div>
    </div>
  `;
  
  document.body.appendChild(modal);
  
  // Remover modal automaticamente ap√≥s 10 segundos
  setTimeout(() => {
    if (modal.parentNode) {
      modal.remove();
    }
  }, 10000);
};

export const sendCompletionEmail = async (order: Order): Promise<boolean> => {
  try {
    const companySettings = storage.getCompanySettings();
    const quotes = storage.getQuotes();
    const originalQuote = quotes.find(q => q.id === order.quoteId);
    
    if (!companySettings) {
      console.warn('Dados da empresa n√£o configurados');
      return false;
    }

    if (!companySettings.emailSettings) {
      console.warn('Configura√ß√µes de email n√£o encontradas');
      return false;
    }

    const emailSettings = companySettings.emailSettings;

    // Verificar se todas as configura√ß√µes necess√°rias est√£o preenchidas
    if (!emailSettings.smtpHost || !emailSettings.smtpUser || !emailSettings.smtpPassword || !emailSettings.fromEmail) {
      console.warn('Configura√ß√µes de email incompletas');
      return false;
    }

    // Gerar o PDF do recibo
    const receiptBlob = await generateReceiptPDFBlob(order);
    
    // Criar o corpo do email de conclus√£o
    const emailBody = `Prezado(a) ${order.client.name},

Temos o prazer de informar que o pedido ${order.number} foi conclu√≠do com sucesso!

DETALHES DO PEDIDO CONCLU√çDO:
‚Ä¢ N√∫mero do Pedido: ${order.number}
‚Ä¢ Data do Pedido: ${order.createdAt.toLocaleDateString('pt-BR')}
‚Ä¢ Data de Conclus√£o: ${order.completedAt ? order.completedAt.toLocaleDateString('pt-BR') : new Date().toLocaleDateString('pt-BR')}
‚Ä¢ Valor Total: ${formatCurrency(order.total)}

${order.services.length > 0 ? `SERVI√áOS REALIZADOS (${order.services.length} item${order.services.length > 1 ? 's' : ''}):` : ''}
${order.services.map(service => `‚Ä¢ ${service.description} - ${service.hours}h - ${formatCurrency(service.total)}`).join('\n')}

${order.products.length > 0 ? `\nPRODUTOS ENTREGUES (${order.products.length} item${order.products.length > 1 ? 's' : ''}):` : ''}
${order.products.map(product => `‚Ä¢ ${product.description} - Qtd: ${product.quantity} - ${formatCurrency(product.total)}`).join('\n')}

${originalQuote && originalQuote.notes ? `\nOBSERVA√á√ïES:\n${originalQuote.notes}` : ''}

Em anexo voc√™ encontra o recibo de pagamento para seus registros.

Agradecemos pela confian√ßa em nossos servi√ßos!

Atenciosamente,
${companySettings.companyName}
${companySettings.phone}
${companySettings.whatsapp ? `WhatsApp: ${companySettings.whatsapp}` : ''}
${emailSettings.fromEmail}

---
Esta √© uma mensagem autom√°tica do sistema de gest√£o.`.trim();

    // Criar link mailto com anexo simulado
    const subject = `Pedido ${order.number} Conclu√≠do - ${emailSettings.fromName}`;
    
    // Tentar usar a API Web Share se dispon√≠vel (para dispositivos m√≥veis)
    if (navigator.share && navigator.canShare) {
      try {
        const file = new File([receiptBlob], `recibo-${order.number}.pdf`, { type: 'application/pdf' });
        
        if (navigator.canShare({ files: [file] })) {
          await navigator.share({
            title: subject,
            text: emailBody,
            files: [file]
          });
          
          showCompletionEmailSuccessModal(order.client.email, emailSettings);
          return true;
        }
      } catch (error) {
        console.log('Web Share n√£o suportado, usando m√©todo alternativo');
      }
    }
    
    // M√©todo alternativo: criar link de download tempor√°rio e abrir email
    // Criar mailto link
    const mailtoLink = `mailto:${order.client.email}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(emailBody)}`;
    
    // Abrir email
    window.open(mailtoLink);
    
    // Mostrar modal de sucesso ap√≥s um breve delay
    setTimeout(() => {
      showCompletionEmailSuccessModal(order.client.email, emailSettings);
    }, 1000);
    
    return true;
  } catch (error) {
    console.error('Erro ao enviar email de conclus√£o:', error);
    showEmailErrorModal('Erro ao preparar o envio do email de conclus√£o');
    return false;
  }
};

// Fun√ß√£o para mostrar modal de sucesso do email de conclus√£o
const showCompletionEmailSuccessModal = (clientEmail: string, emailSettings: any) => {
  const modal = document.createElement('div');
  modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
  modal.innerHTML = `
    <div class="bg-white rounded-lg p-8 max-w-md w-full mx-4">
      <div class="text-center">
        <div class="mx-auto flex items-center justify-center w-12 h-12 rounded-full bg-green-100 mb-4">
          <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
          </svg>
        </div>
        <h3 class="text-lg font-semibold text-gray-900 mb-2">
          Email de Conclus√£o Enviado! ‚úÖ
        </h3>
        <div class="text-left bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
          <p class="text-sm text-green-800 mb-2">
            <strong>üìß Destinat√°rio:</strong> ${clientEmail}
          </p>
          <p class="text-sm text-green-800 mb-2">
            <strong>üì§ Servidor:</strong> ${emailSettings.smtpHost}:${emailSettings.smtpPort}
          </p>
          <p class="text-sm text-green-800">
            <strong>üë§ Remetente:</strong> ${emailSettings.fromName}
          </p>
        </div>
        <div class="text-left bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
          <p class="text-sm text-blue-800">
            <strong>üìé O que foi enviado:</strong><br/>
            ‚Ä¢ Notifica√ß√£o de conclus√£o do pedido<br/>
            ‚Ä¢ Recibo de pagamento (anexar manualmente)<br/>
            ‚Ä¢ Detalhes dos servi√ßos realizados<br/>
            ‚Ä¢ Dados de contato da empresa
          </p>
        </div>
        <button
          onclick="this.closest('.fixed').remove()"
          class="w-full bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
        >
          Fechar
        </button>
      </div>
    </div>
  `;
  
  document.body.appendChild(modal);
  
  // Remover modal automaticamente ap√≥s 10 segundos
  setTimeout(() => {
    if (modal.parentNode) {
      modal.remove();
    }
  }, 10000);
};

// Fun√ß√£o para mostrar modal de erro
const showEmailErrorModal = (errorMessage: string) => {
  const modal = document.createElement('div');
  modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
  modal.innerHTML = `
    <div class="bg-white rounded-lg p-8 max-w-md w-full mx-4">
      <div class="text-center">
        <div class="mx-auto flex items-center justify-center w-12 h-12 rounded-full bg-red-100 mb-4">
          <svg class="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </div>
        <h3 class="text-lg font-semibold text-gray-900 mb-2">
          Erro no Envio ‚ùå
        </h3>
        <div class="text-left bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
          <p class="text-sm text-red-800">
            ${errorMessage}
          </p>
        </div>
        <div class="text-left bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6">
          <p class="text-sm text-yellow-800">
            <strong>üí° Verifique:</strong><br/>
            ‚Ä¢ Configura√ß√µes de email est√£o completas<br/>
            ‚Ä¢ Servidor SMTP est√° correto<br/>
            ‚Ä¢ Credenciais est√£o v√°lidas<br/>
            ‚Ä¢ Conex√£o com internet est√° ativa
          </p>
        </div>
        <button
          onclick="this.closest('.fixed').remove()"
          class="w-full bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
        >
          Fechar
        </button>
      </div>
    </div>
  `;
  
  document.body.appendChild(modal);
};